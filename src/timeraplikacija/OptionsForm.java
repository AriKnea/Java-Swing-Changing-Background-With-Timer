
package timeraplikacija;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.colorchooser.AbstractColorChooserPanel;

/**
 *
 * @author Arijana Knezevic
 */
public class OptionsForm extends javax.swing.JFrame {

    
   Color c;
   SwingWorker sw;
   JFrame coloredFrame;
   Timer timerCountdown;
   
   
  
    /**
     * Creates new form OptionsForm
     */
    public OptionsForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        onTimeRadio = new javax.swing.JRadioButton();
        countdownRadio = new javax.swing.JRadioButton();
        onTimeText = new javax.swing.JFormattedTextField();
        countText = new javax.swing.JFormattedTextField();
        chooseBtn = new javax.swing.JButton();
        speedLabel = new javax.swing.JLabel();
        selectSpeed = new javax.swing.JComboBox<>();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        selectedColor = new javax.swing.JLabel();
        onTimeInputErr = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup1.add(onTimeRadio);
        onTimeRadio.setText("On time");
        onTimeRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                onTimeRadioItemStateChanged(evt);
            }
        });
        onTimeRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onTimeRadioActionPerformed(evt);
            }
        });

        buttonGroup1.add(countdownRadio);
        countdownRadio.setText("Countdown (seconds)");
        countdownRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                countdownRadioItemStateChanged(evt);
            }
        });
        countdownRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countdownRadioActionPerformed(evt);
            }
        });

        onTimeText.setColumns(15);
        try {
            onTimeText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        onTimeText.setRequestFocusEnabled(false);

        countText.setColumns(15);
        countText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        countText.setRequestFocusEnabled(false);

        chooseBtn.setText("Choose color");
        chooseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseBtnActionPerformed(evt);
            }
        });

        speedLabel.setText("Speed:");

        selectSpeed.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(onTimeInputErr)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(chooseBtn)
                            .addGap(46, 46, 46)
                            .addComponent(selectedColor)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(selectSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(speedLabel))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(startButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(stopButton))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(countdownRadio)
                                            .addGap(44, 44, 44))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(onTimeRadio)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(countText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(onTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGap(103, 103, 103)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(onTimeRadio)
                    .addComponent(onTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(onTimeInputErr)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countdownRadio)
                    .addComponent(countText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseBtn)
                    .addComponent(selectedColor))
                .addGap(27, 27, 27)
                .addComponent(speedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    private void onTimeRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onTimeRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_onTimeRadioActionPerformed

    private void countdownRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countdownRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_countdownRadioActionPerformed

    private void onTimeRadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_onTimeRadioItemStateChanged
if (onTimeRadio.isSelected())  {
countText.setEditable(false);
onTimeText.requestFocus(true);
onTimeText.setEditable(true);
}      // TODO add your handling code here:
    }//GEN-LAST:event_onTimeRadioItemStateChanged

    private void countdownRadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_countdownRadioItemStateChanged
 if (countdownRadio.isSelected()) {
 onTimeText.setEditable(false);
 countText.requestFocus(true);
 countText.setEditable(true);
 }    

    
    }//GEN-LAST:event_countdownRadioItemStateChanged

    private void chooseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseBtnActionPerformed
    JColorChooser jcc = new JColorChooser ();
    
    AbstractColorChooserPanel[] panels=jcc.getChooserPanels();
        for(AbstractColorChooserPanel chPanel:panels){
            String panelName=chPanel.getDisplayName();
            switch (panelName) {
                  case "CMYK":
                    jcc.removeChooserPanel(chPanel);
                    break;
                case "HSV":
                    jcc.removeChooserPanel(chPanel);
                    break;
                case "HSL":
                    jcc.removeChooserPanel(chPanel);
                    break;
                case "RGB":
                    jcc.removeChooserPanel(chPanel);
                    break;
                  case "Swatches":
                    jcc.removeChooserPanel(chPanel);
                    break;
            }
        }
         
    jcc.addChooserPanel(new CustomizedChooserRGB());
    JDialog dialog = JColorChooser.createDialog(null, "Choose color", true, jcc, ((ActionEvent)-> {c = jcc.getColor();
    selectedColor.setText("Selected color preview");
    }), null);
    dialog.setVisible(true);
   
   
    }//GEN-LAST:event_chooseBtnActionPerformed
   
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
     int start;
     coloredFrame = new JFrame ();
     coloredFrame.setSize(500,500);
     coloredFrame.setLocation(600, 0);
     coloredFrame.setUndecorated(true);
     
     
     
    
     
     ActionListener colorChange = (ActionEvent e) -> {
          sw = new SwingWorker() {
             @Override
             protected String doInBackground() throws Exception {
                 while (!isCancelled()) {
                 coloredFrame.setVisible(true);
                 coloredFrame.getContentPane().setBackground(c);
                 
                 int threadSpeed = Integer.parseInt((String) selectSpeed.getSelectedItem());
                 switch (threadSpeed) {
                     case 1:
                         coloredFrame.getContentPane().setBackground(Color.white);
                         Thread.sleep(1000);
                         coloredFrame.getContentPane().setBackground(c);
                         Thread.sleep(1000); 
                     break;
                     case 2:
                         coloredFrame.getContentPane().setBackground(Color.white);
                         Thread.sleep(2000);
                         coloredFrame.getContentPane().setBackground(c);
                         Thread.sleep(2000);
                         break;
                     case 3:
                         coloredFrame.getContentPane().setBackground(Color.white);
                         Thread.sleep(3000);
                         coloredFrame.getContentPane().setBackground(c);
                         Thread.sleep(3000);
                         break;
                     case 4:
                         coloredFrame.getContentPane().setBackground(Color.white);
                         Thread.sleep(4000);
                         coloredFrame.getContentPane().setBackground(c);
                         Thread.sleep(4000);
                         break;
                     case 5:
                         coloredFrame.getContentPane().setBackground(Color.white);                      
                         Thread.sleep(5000);
                         coloredFrame.getContentPane().setBackground(c);
                         Thread.sleep(5000);
                         break;
                 }
                 }
                 
                 return null;
                   
             };
             
         };   sw.execute();
     };
     
    
    // ODBROJAVANJE 
     
            if (buttonGroup1.getSelection()!=null) {
            System.out.println("Radio button selected");
            if (countdownRadio.isSelected()) {
            String secondsEntered = countText.getText() + "000";
            start = Integer.parseInt(secondsEntered);
            System.out.println("Count entered: " + start);
            onTimeText.setEditable(false);
            countText.setEditable(false);
            startButton.setEnabled(false);
            selectSpeed.setEditable(false);
            chooseBtn.setEnabled(false);
            countdownRadio.setEnabled(false);
            onTimeRadio.setEnabled(false);
            selectSpeed.setEnabled(false);
            timerCountdown = new Timer (start, colorChange);
            timerCountdown.setRepeats(false);
            timerCountdown.start();
            stopButton.setEnabled(true);}
            
    // ODREĐENO VRIJEME
            
            
            else if (onTimeRadio.isSelected()) {
            String startOnTime = onTimeText.getText();
            int hours = Integer.parseInt(startOnTime.split((":"))[0]);
            int minutes = Integer.parseInt(startOnTime.split((":"))[1]);
            int seconds = Integer.parseInt(startOnTime.split((":"))[2]);
            if (hours < 24 && minutes < 60 && seconds < 60) {
            int finalSeconds = (((hours*60)+minutes)*60) + seconds;
            int onTimeMilis = finalSeconds * 1000;
            String currentInString = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
            int curHours = Integer.parseInt(currentInString.split((":"))[0]);
            int curMinutes = Integer.parseInt(currentInString.split((":"))[1]);
            int curSeconds = Integer.parseInt(currentInString.split((":"))[2]);
            int currentSeconds = (((curHours*60)+ curMinutes)*60) + curSeconds;
            int curTimeMilis = currentSeconds * 1000;
            int startIn = onTimeMilis - curTimeMilis;
            if (startIn<0) {
            onTimeInputErr.setText("Please enter the time after the current one. Current time: " + currentInString);
            onTimeText.requestFocus(true);
            stopButton.setEnabled(false);
            return;
            }
            onTimeInputErr.setText("");
            System.out.println("On time milis: " + onTimeMilis + " Current milis " + curTimeMilis);
            System.out.println("Start in " + startIn );
            onTimeText.setEditable(false);
            countText.setEditable(false);
            startButton.setEnabled(false);
            selectSpeed.setEditable(false);
            chooseBtn.setEnabled(false);
            countdownRadio.setEnabled(false);
            onTimeRadio.setEnabled(false);
            selectSpeed.setEnabled(false);
            timerCountdown = new Timer ((int) startIn, colorChange);
            timerCountdown.setRepeats(false);
            timerCountdown.start();
            stopButton.setEnabled(true);
        }
            
            else { onTimeInputErr.setText("Input error: Invalid time format");
            onTimeText.requestFocus(true);
            stopButton.setEnabled(false);
            
            }
        }
            }
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
  
    sw.cancel(true);
    
   
    coloredFrame.dispose();
    onTimeText.setEditable(true);
    countText.setEditable(true);
    startButton.setEnabled(true);
    selectSpeed.setEditable(true);
    chooseBtn.setEnabled(true);
    selectSpeed.setEnabled(true);
    countdownRadio.setEnabled(true);
    onTimeRadio.setEnabled(true);
    buttonGroup1.clearSelection();
    onTimeInputErr.setText("Please select option: On time or Countdown ");
    }//GEN-LAST:event_stopButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OptionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OptionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OptionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OptionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new OptionsForm().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton chooseBtn;
    private javax.swing.JFormattedTextField countText;
    private javax.swing.JRadioButton countdownRadio;
    private javax.swing.JLabel onTimeInputErr;
    private javax.swing.JRadioButton onTimeRadio;
    private javax.swing.JFormattedTextField onTimeText;
    private javax.swing.JComboBox<String> selectSpeed;
    private javax.swing.JLabel selectedColor;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}